WRITE AN ECP TO DISPLAY AN INTEGER ON 16x2 ALPHANUMERIC LCD USING LPC2129 

#include <lpc21xx.h>  
#define LCD_D  (0xff<<0)      // Mask for LCD data lines (P0.0â€“P0.7)
#define RS     (1<<8)         // RS pin mask (P0.8) - Register Select
#define E      (1<<9)         // Enable pin mask (P0.9)
typedef unsigned int us;      
typedef unsigned char u8;     

// -------------------- Delay Function --------------------

void delay_ms(us ms)
{
    T0PR = 15000 - 1;         // Prescaler: generates 1ms tick for PCLK=15MHz
    T0TCR = 0x03;             // Reset & enable timer
    T0TCR = 0x01;             // Start timer
    while (T0TC < ms);        // Wait until the timer counter reaches 'ms'
    T0TCR = 0x00;             // Stop timer
}

// -------------------- Function Prototypes --------------------

void LCD_INIT(void);          // Initialize LCD
void LCD_COMMAND(u8 cmd);     // Send command to LCD
void LCD_DATA(u8 data);       // Send data (character) to LCD
void LCD_INTEGER(int n);      // Display integer on LCD

// -------------------- Main Program --------------------

int main()
{              
    LCD_INIT();               //  Initialize the LCD
    while (1)                 //  Loop forever
    {
        LCD_COMMAND(0x80);    // Move cursor to 1st row, 1st column
        LCD_INTEGER(1234);    // Display integer on LCD
    }
}

// -------------------- LCD Initialization --------------------

void LCD_INIT(void)
{
    IODIR0|= LCD_D|RS|E;      // Configure LCD data & control pins as output
    LCD_COMMAND(0x01);        // Clear display
    LCD_COMMAND(0x02);        // Return cursor to home position
    LCD_COMMAND(0x0C);        // Display ON, cursor OFF
    LCD_COMMAND(0x38);        // 8-bit mode, 2 lines, 5x7 font
    LCD_COMMAND(0x80);        // Set cursor to row 1, col 1
}

// -------------------- Send Command to LCD --------------------

void LCD_COMMAND(u8 cmd)
{
    IOCLR0 = LCD_D;           // Clear previous data bits on port
    IOSET0 = cmd;             // Place command byte on data lines
    IOCLR0 = RS;              // RS = 0 for command mode
    IOSET0 = E;               // Enable HIGH to latch data
    delay_ms(2);              // Small delay for LCD to process command
    IOCLR0 = E;               // Enable LOW to complete latch
}

// -------------------- Send Data/Character to LCD --------------------

void LCD_DATA(u8 d)
{
    IOCLR0 = LCD_D;           // Clear previous data bits on port
    IOSET0 = d;               // Place data byte on data lines
    IOSET0 = RS;              // RS = 1 for data mode
    IOSET0 = E;               // Enable HIGH to latch data
    delay_ms(2);              // Small delay for LCD to process data
    IOCLR0 = E;               // Enable LOW to complete latch
}

// -------------------- Display Integer on LCD --------------------

void LCD_INTEGER(int n)
{
    u8 arr[5];                // Array to store digits
    signed char i = 0;        // Index for digit array
    if (n == 0)                // Case 1: Number is zero
    {
        LCD_DATA('0');         // Display '0'
    }
    else
    {
        if (n < 0)             // Case 2: Negative number
        {
            LCD_DATA('-');     // Display minus sign
            n = -n;            // Make number positive for processing
        }
        while (n > 0)          // Extract digits
        {
            arr[i++] = n % 10; // Store last digit
            n = n / 10;        // Remove last digit
        }
        for (i = i - 1; i >= 0; i--)  // Print digits in reverse order (also use --i)
        {
            LCD_DATA(arr[i] + 48);    // Convert to ASCII and display
        }
    }
}
